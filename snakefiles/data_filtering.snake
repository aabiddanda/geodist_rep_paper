#!/bin/python3

import numpy as np 
import pandas as pd
import sys
sys.path.append('src/')
shell.prefix("set -o pipefail; ")

VCF_DIR = '/home/abiddanda/novembre_lab2/data/external_public/1kg_phase3/high_coverage/'
SGDP_DIR = '/home/abiddanda/novembre_lab2/data/external_public/sgdp/'
TMP_DIR = '/scratch/midway2/abiddanda/'
SGDP_OUT_DIR = '/project2/jnovembre/data/external_public/geodist/anno/sgdp_paired/'
AUTOSOMES = np.arange(1,23)

# -------------- PIPELINE RULES --------------- # 
rule filter_to_pass:
  input:
    vcf = VCF_DIR + 'new_1kg_nygc_chr{CHROM}.biallelic_snps.vcf.gz'
  output:
    out_vcf = VCF_DIR + 'new_1kg_nygc_chr{CHROM,\d+}.biallelic_snps.filt.vcf.gz'
  shell:
    '''
    bcftools view -i \'%FILTER == \"PASS\"\' {input.vcf} | bgzip -@10 > {output.out_vcf}
    tabix -f {output.out_vcf}
    '''
    
rule get_paired_sgdp_snplist:
  input:
    SGDP_VCFs = expand(SGDP_DIR  + 'merged/sgdp_total_merged_chr{CHROM}.vcf.gz', CHROM=AUTOSOMES)
  output:
    paired_snplist = TMP_DIR + 'sgdp_paired/paired_{sample1}.{sample2}_autosomes.txt.gz'
  shell:
    '''
    for i in {input}; do bcftools view -v snps -c 1:minor -m2 -M2 -s {wildcards.sample1},{wildcards.sample2} $i | bcftools query -f \"%CHROM\t%POS\n\" ;done | bgzip > {output.paired_snplist}
    '''

rule concat_sgdp_snplist:
  input:
    snplists = rules.get_paired_sgdp_snplist.output.paired_snplist
  output:
    concat_snplists = TMP_DIR + 'sgdp_paired/totals/paired_{sample1}.{sample2}.autosomes.txt.gz'
  shell:
    """
    zcat {input.snplists} | bgzip > {output.concat_snplists} 
    """

rule liftover_sgdp_hg37_hg38:
  input:
    snplist = rules.concat_sgdp_snplist.output.concat_snplists,
    chain_file = 'src/sandbox/hg19ToHg38.over.chain.gz'
  output:
    liftover_snplist = SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist'
  shell:
    '''
    python3 src/liftover_snplist.py --snplist {input.snplist} --chain {input.chain_file} --prefix chr > {output.liftover_snplist}
    '''

SGDP_ID_FILE = SGDP_DIR + 'sgdp_id_pop.txt'
SGDP_DF = pd.read_csv(SGDP_ID_FILE, sep='\s+')
TOTAL_IDS = SGDP_DF['Illumina_ID']
POP_IDS = SGDP_DF['Population_ID']

# Replicating across pairs from the same populations
Yoruba_idxs = np.where(POP_IDS.values == 'Yoruba')[0]
Han_idxs = np.where(POP_IDS.values == 'Han')[0]
French_idxs = np.where(POP_IDS.values == 'French')[0]

Yoruba_names = TOTAL_IDS.values[Yoruba_idxs]
Han_names = TOTAL_IDS.values[Han_idxs]
French_names = TOTAL_IDS.values[French_idxs]

rule sgdp_paired_test:
  input:
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=Yoruba_names[0], sample2=Yoruba_names[1:]),
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=Yoruba_names[0], sample2=Han_names),
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=Yoruba_names[0], sample2=French_names),
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=French_names[0], sample2=Han_names),
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=French_names[0], sample2=French_names[1:]),
    expand(SGDP_OUT_DIR + 'totals/paired_{sample1}.{sample2}.hg38.filtered.snplist', sample1=Han_names[0], sample2=Han_names[1:]),

    
    
    
    
    
    
    
    
    
    
